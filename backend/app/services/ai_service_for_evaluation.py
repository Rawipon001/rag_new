"""
AI Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Evaluation - ‡∏õ‡∏µ 2568 (‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)
‡πÉ‡∏ä‡πâ Prompt ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£
‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á raw response ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥ evaluation

‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå:
1. ‡πÅ‡∏™‡∏î‡∏á raw response ‡∏à‡∏≤‡∏Å OpenAI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å logs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
3. ‡∏ó‡∏≥ evaluation ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
"""

from langchain_openai import ChatOpenAI
import json
import os
from typing import Dict, List, Any, Tuple
from pathlib import Path

# Import models ‡πÅ‡∏•‡∏∞ config
from app.models import TaxCalculationRequest, TaxCalculationResult
from app.config import settings


class AIServiceForEvaluation:
    """
    AI Service ‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Evaluation
    
    ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å:
    - ‡πÅ‡∏™‡∏î‡∏á raw response
    - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å logs
    - Verbose logging
    - ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
    """
    
    def __init__(self, verbose: bool = True, save_to_file: bool = True):
        """
        Args:
            verbose: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° debug
            save_to_file: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å logs ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        """
        self.llm = ChatOpenAI(
            model=settings.openai_model,
            temperature=0.3,  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
            openai_api_key=settings.openai_api_key
        )
        self.verbose = verbose
        self.save_to_file = save_to_file
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö logs
        if self.save_to_file:
            self.log_dir = Path(__file__).parent.parent.parent / "evaluation_logs"
            self.log_dir.mkdir(exist_ok=True)
            if self.verbose:
                print(f"üìÇ Log directory: {self.log_dir}")
    
    def generate_tax_optimization_prompt(
        self, 
        request: TaxCalculationRequest,
        tax_result: TaxCalculationResult,
        retrieved_context: str
    ) -> str:
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£
        
        üî• CRITICAL: Prompt ‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö ai_service.py ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
        """
        
        gross = tax_result.gross_income
        taxable = tax_result.taxable_income
        current_tax = tax_result.tax_amount
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ - ‡∏õ‡∏µ 2568
        max_rmf = min(gross * 0.30, 500000)
        max_thai_esg = 300000  # ‡πÉ‡∏´‡∏°‡πà‡∏õ‡∏µ 2568
        max_thai_esgx_new = 300000  # ‡πÉ‡∏´‡∏°‡πà‡∏õ‡∏µ 2568
        max_thai_esgx_ltf = 300000  # ‡πÉ‡∏´‡∏°‡πà‡∏õ‡∏µ 2568
        max_pension = min(gross * 0.15, 200000)
        max_pvd = min(gross * 0.15, 500000)
        
        remaining_rmf = max_rmf - request.rmf
        remaining_thai_esg = max_thai_esg - request.thai_esg
        remaining_thai_esgx_new = max_thai_esgx_new - request.thai_esgx_new
        remaining_thai_esgx_ltf = max_thai_esgx_ltf - request.thai_esgx_ltf
        remaining_pension = max_pension - request.pension_insurance
        remaining_pvd = max_pvd - request.provident_fund
        remaining_life = 100000 - request.life_insurance
        remaining_life_pension = 10000 - request.life_insurance_pension
        remaining_health = 25000 - request.health_insurance
        
        # ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°
        if taxable <= 150000:
            marginal_rate = 0
        elif taxable <= 300000:
            marginal_rate = 5
        elif taxable <= 500000:
            marginal_rate = 10
        elif taxable <= 750000:
            marginal_rate = 15
        elif taxable <= 1000000:
            marginal_rate = 20
        elif taxable <= 2000000:
            marginal_rate = 25
        elif taxable <= 5000000:
            marginal_rate = 30
        else:
            marginal_rate = 35
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        has_life_insurance = request.life_insurance > 0
        has_health_insurance = request.health_insurance > 0
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
        risk_map = {
            'low': '‡∏ï‡πà‡∏≥',
            'medium': '‡∏Å‡∏•‡∏≤‡∏á',
            'high': '‡∏™‡∏π‡∏á'
        }
        risk_thai = risk_map.get(request.risk_tolerance, request.risk_tolerance)
        risk_level = request.risk_tolerance
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
        if gross < 600000:
            suggested_min = 60000
            suggested_max = 150000
        elif gross < 1000000:
            suggested_min = 150000
            suggested_max = 300000
        elif gross < 1500000:
            suggested_min = 300000
            suggested_max = 500000
        elif gross < 2000000:
            suggested_min = 500000
            suggested_max = 800000
        elif gross < 3000000:
            suggested_min = 800000
            suggested_max = 1200000
        else:
            suggested_min = 1200000
            suggested_max = 1800000
        
        potential_tax_saving = int(suggested_max * (marginal_rate / 100))
        
        # üî• PROMPT ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£
        return f"""‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ ‡∏õ‡∏µ 2568

üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:
- ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°: {gross:,.0f} ‡∏ö‡∏≤‡∏ó
- ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: {taxable:,.0f} ‡∏ö‡∏≤‡∏ó
- ‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: {current_tax:,.0f} ‡∏ö‡∏≤‡∏ó
- ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°: {marginal_rate}%
- ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {risk_thai}

üí∞ ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö (‡∏õ‡∏µ 2568):
- RMF: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_rmf:,.0f} ‡∏ö‡∏≤‡∏ó (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_rmf:,.0f})
- ThaiESG: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_thai_esg:,.0f} ‡∏ö‡∏≤‡∏ó (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_thai_esg:,.0f})
- ThaiESGX (‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà): ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_thai_esgx_new:,.0f} ‡∏ö‡∏≤‡∏ó (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_thai_esgx_new:,.0f})
- ThaiESGX (‡∏à‡∏≤‡∏Å LTF): ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_thai_esgx_ltf:,.0f} ‡∏ö‡∏≤‡∏ó (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_thai_esgx_ltf:,.0f})
- ‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ä‡∏µ‡∏û: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_pvd:,.0f} ‡∏ö‡∏≤‡∏ó (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_pvd:,.0f})
- ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_pension:,.0f} ‡∏ö‡∏≤‡∏ó (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_pension:,.0f})
- ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_life:,.0f} ‡∏ö‡∏≤‡∏ó
- ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÅ‡∏ö‡∏ö‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_life_pension:,.0f} ‡∏ö‡∏≤‡∏ó
- ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_health:,.0f} ‡∏ö‡∏≤‡∏ó

üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡∏µ‡πâ:
- ‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {suggested_min:,.0f} - {suggested_max:,.0f} ‡∏ö‡∏≤‡∏ó
- ‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÑ‡∏î‡πâ: ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {potential_tax_saving:,.0f} ‡∏ö‡∏≤‡∏ó

üè• ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô:
- ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï: {'‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß' if has_life_insurance else '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ - ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ'}
- ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û: {'‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß' if has_health_insurance else '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ - ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ'}

üÜï ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô‡∏õ‡∏µ 2568:
- ‚ùå SSF ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß
- ‚úÖ ThaiESG/ThaiESGX ‡∏°‡∏≤‡πÅ‡∏ó‡∏ô (‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô 300,000 ‡∏ö‡∏≤‡∏ó ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô 30%)
- ‚úÖ Easy e-Receipt ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 50,000 ‡∏ö‡∏≤‡∏ó
- ‚úÖ ‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏∞‡∏ö‡∏¥‡∏î‡∏≤‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 60,000 ‡∏ö‡∏≤‡∏ó/‡∏Ñ‡∏ô

üìö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Knowledge Base:
{retrieved_context}

üéØ ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à: ‡∏™‡∏£‡πâ‡∏≤‡∏á 3 ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô

**‡∏Å‡∏é‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:**
1. ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á {suggested_min:,.0f} - {suggested_max:,.0f} ‡∏ö‡∏≤‡∏ó
2. ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ú‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö "{risk_level}"
3. ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏ô‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô + ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏Å‡∏•‡πâ minimum)
4. ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏™‡∏°‡∏î‡∏∏‡∏• ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÜ)
5. ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà 3: ‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï + ‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏Å‡∏•‡πâ maximum)
{'6. ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ú‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20,000 ‡∏ö‡∏≤‡∏ó' if not has_life_insurance else ''}
{'7. ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ú‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 15,000 ‡∏ö‡∏≤‡∏ó' if not has_health_insurance else ''}
8. ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô RMF ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà (‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á) ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á
9. **‡πÉ‡∏ä‡πâ ThaiESG/ThaiESGX ‡πÅ‡∏ó‡∏ô SSF** (SSF ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏õ‡∏µ 2568)
10. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á (1,500,000+): ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (‡∏ô‡∏±‡∏ö 2 ‡πÄ‡∏ó‡πà‡∏≤)

**‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á JSON ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:**

```json
{{
  "plans": [
    {{
      "plan_id": "1",
      "plan_name": "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 1 - ‡πÄ‡∏ô‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô",
      "plan_type": "{risk_level}",
      "description": "‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á ‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏û‡∏≠‡πÄ‡∏´‡∏°‡∏≤‡∏∞",
      "total_investment": {suggested_min},
      "total_tax_saving": {int(suggested_min * marginal_rate / 100)},
      "overall_risk": "{risk_level}",
      "allocations": [...]
    }},
    {{
      "plan_id": "2",
      "plan_name": "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 2 - ‡∏™‡∏°‡∏î‡∏∏‡∏•",
      "plan_type": "{risk_level}",
      "description": "‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡πÄ‡∏ô‡πâ‡∏ô RMF + ThaiESG",
      "total_investment": {int((suggested_min + suggested_max) / 2)},
      "total_tax_saving": {int((suggested_min + suggested_max) / 2 * marginal_rate / 100)},
      "overall_risk": "{risk_level}",
      "allocations": [...]
    }},
    {{
      "plan_id": "3",
      "plan_name": "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 3 - ‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
      "plan_type": "{risk_level}",
      "description": "‡πÄ‡∏ô‡πâ‡∏ô‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡πÉ‡∏ä‡πâ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà",
      "total_investment": {suggested_max},
      "total_tax_saving": {int(suggested_max * marginal_rate / 100)},
      "overall_risk": "{risk_level}",
      "allocations": [...]
    }}
  ]
}}
```

**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:**
- ‡πÅ‡∏ï‡πà‡∏•‡∏∞ allocation ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å field: category, percentage, risk_level, pros, cons
- **‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà investment_amount ‡πÅ‡∏•‡∏∞ tax_saving ‡πÉ‡∏ô allocations** (‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
- pros ‡πÅ‡∏•‡∏∞ cons ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á string (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2-3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
- **percentage ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á 100** (‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 99-101)
- **‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏ä‡πâ SSF** ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏õ‡∏µ 2568 ‡πÉ‡∏ä‡πâ ThaiESG/ThaiESGX ‡πÅ‡∏ó‡∏ô

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ markdown ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô:"""
    
    async def generate_recommendations(
        self,
        request: TaxCalculationRequest,
        tax_result: TaxCalculationResult,
        retrieved_context: str,
        test_case_id: int = 0
    ) -> Tuple[Dict[str, Any], str]:
        """
        ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OpenAI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        
        Returns:
            (parsed_result, raw_response)
        """
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt
            prompt = self.generate_tax_optimization_prompt(
                request, tax_result, retrieved_context
            )
            
            # ‡πÅ‡∏™‡∏î‡∏á Prompt (‡∏ñ‡πâ‡∏≤ verbose)
            if self.verbose:
                print("\n" + "=" * 80)
                print("üì§ PROMPT SENT TO OPENAI:")
                print("=" * 80)
                print(prompt[:1500] + "...[truncated]" if len(prompt) > 1500 else prompt)
                print("=" * 80 + "\n")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Prompt ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
            if self.save_to_file:
                prompt_file = self.log_dir / f"prompt_test_case_{test_case_id}.txt"
                with open(prompt_file, 'w', encoding='utf-8') as f:
                    f.write(prompt)
                if self.verbose:
                    print(f"üíæ Saved prompt to: {prompt_file}\n")
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OpenAI
            if self.verbose:
                print("ü§ñ Calling OpenAI API...")
            
            response = await self.llm.ainvoke(prompt)
            raw_response = response.content
            
            # ‡πÅ‡∏™‡∏î‡∏á Raw Response
            if self.verbose:
                print("\n" + "=" * 80)
                print("üì• RAW RESPONSE FROM OPENAI:")
                print("=" * 80)
                print(raw_response[:2000] if len(raw_response) > 2000 else raw_response)
                if len(raw_response) > 2000:
                    print(f"...[truncated, total {len(raw_response)} characters]")
                print("=" * 80 + "\n")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Raw Response ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
            if self.save_to_file:
                response_file = self.log_dir / f"raw_response_test_case_{test_case_id}.txt"
                with open(response_file, 'w', encoding='utf-8') as f:
                    f.write(raw_response)
                if self.verbose:
                    print(f"üíæ Saved raw response to: {response_file}\n")
            
            # Parse JSON
            plans_text = raw_response.strip()
            
            # ‡∏•‡∏ö markdown code blocks ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if plans_text.startswith("```json"):
                plans_text = plans_text[7:]
                if self.verbose:
                    print("üîß Removed ```json prefix")
            if plans_text.startswith("```"):
                plans_text = plans_text[3:]
                if self.verbose:
                    print("üîß Removed ``` prefix")
            if plans_text.endswith("```"):
                plans_text = plans_text[:-3]
                if self.verbose:
                    print("üîß Removed ``` suffix")
            
            plans_text = plans_text.strip()
            result = json.loads(plans_text)
            
            # ‡πÅ‡∏™‡∏î‡∏á Parsed Result
            if self.verbose:
                print("\n" + "=" * 80)
                print("üìä PARSED RESULT:")
                print("=" * 80)
                print(json.dumps(result, indent=2, ensure_ascii=False)[:1500])
                print("=" * 80 + "\n")
                print(f"‚úÖ Successfully parsed {len(result.get('plans', []))} plans\n")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Parsed Result ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
            if self.save_to_file:
                parsed_file = self.log_dir / f"parsed_result_test_case_{test_case_id}.json"
                with open(parsed_file, 'w', encoding='utf-8') as f:
                    json.dump(result, f, indent=2, ensure_ascii=False)
                if self.verbose:
                    print(f"üíæ Saved parsed result to: {parsed_file}\n")
            
            # Validate
            self._validate_response(result)
            
            return result, raw_response
            
        except json.JSONDecodeError as e:
            print(f"\n‚ùå JSON Parse Error: {e}")
            print(f"\nüìÑ Raw Response was:")
            print("=" * 80)
            print(raw_response[:1000])
            print("=" * 80)
            
            if self.save_to_file:
                error_file = self.log_dir / f"error_test_case_{test_case_id}.txt"
                with open(error_file, 'w', encoding='utf-8') as f:
                    f.write(f"JSON Parse Error: {e}\n\n")
                    f.write("Raw Response:\n")
                    f.write(raw_response)
                print(f"\nüíæ Saved error to: {error_file}\n")
            
            return self._get_fallback_response(request, tax_result), raw_response
            
        except Exception as e:
            print(f"\n‚ùå Error: {e}")
            import traceback
            traceback.print_exc()
            
            if self.save_to_file:
                error_file = self.log_dir / f"error_test_case_{test_case_id}.txt"
                with open(error_file, 'w', encoding='utf-8') as f:
                    f.write(f"Error: {e}\n\n")
                    f.write(traceback.format_exc())
                print(f"\nüíæ Saved error to: {error_file}\n")
            
            return self._get_fallback_response(request, tax_result), ""
    
    def _validate_response(self, result: Dict[str, Any]):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á response
        """
        if "plans" not in result:
            raise ValueError("Missing 'plans' key in response")
        
        if len(result["plans"]) != 3:
            raise ValueError(f"Expected 3 plans, got {len(result['plans'])}")
        
        required_plan_fields = ["plan_id", "plan_name", "plan_type", "description",
                               "total_investment", "total_tax_saving", "overall_risk", "allocations"]
        required_alloc_fields = ["category", "percentage", "risk_level", "pros", "cons"]
        
        for i, plan in enumerate(result["plans"]):
            for field in required_plan_fields:
                if field not in plan:
                    raise ValueError(f"Plan {i+1} missing field: {field}")
            
            if not plan["allocations"]:
                raise ValueError(f"Plan {i+1} has empty allocations")
            
            for j, alloc in enumerate(plan["allocations"]):
                for field in required_alloc_fields:
                    if field not in alloc:
                        raise ValueError(f"Plan {i+1}, Allocation {j+1} missing field: {field}")
        
        if self.verbose:
            print("‚úÖ Response validation passed")
    
    def _get_fallback_response(
        self,
        request: TaxCalculationRequest,
        tax_result: TaxCalculationResult
    ) -> Dict[str, Any]:
        """
        ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Å‡∏£‡∏ì‡∏µ AI ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        """
        if self.verbose:
            print("\n‚ö†Ô∏è  Using fallback response...\n")
        
        gross = tax_result.gross_income
        risk = request.risk_tolerance
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        if gross < 1000000:
            base_investment = 150000
        elif gross < 2000000:
            base_investment = 500000
        else:
            base_investment = 1000000
        
        return {
            "plans": [
                {
                    "plan_id": "1",
                    "plan_name": "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 1 - ‡πÄ‡∏ô‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô (Fallback)",
                    "plan_type": risk,
                    "description": "‡πÅ‡∏ú‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á - ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á",
                    "total_investment": base_investment,
                    "total_tax_saving": int(base_investment * 0.25),
                    "overall_risk": risk,
                    "allocations": [
                        {
                            "category": "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
                            "investment_amount": int(base_investment * 0.25),
                            "percentage": 25,
                            "tax_saving": int(base_investment * 0.0625),
                            "risk_level": "low",
                            "pros": ["‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á", "‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"],
                            "cons": ["‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ï‡πà‡∏≥"]
                        },
                        {
                            "category": "RMF",
                            "investment_amount": int(base_investment * 0.50),
                            "percentage": 50,
                            "tax_saving": int(base_investment * 0.125),
                            "risk_level": risk,
                            "pros": ["‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏π‡∏á", "‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏î‡∏µ"],
                            "cons": ["‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏∑‡∏≠ 5 ‡∏õ‡∏µ"]
                        },
                        {
                            "category": "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç",
                            "investment_amount": int(base_investment * 0.25),
                            "percentage": 25,
                            "tax_saving": int(base_investment * 0.0625),
                            "risk_level": "low",
                            "pros": ["‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô"],
                            "cons": ["‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô‡∏¢‡∏≤‡∏ß"]
                        }
                    ]
                },
                {
                    "plan_id": "2",
                    "plan_name": "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 2 - ‡∏™‡∏°‡∏î‡∏∏‡∏• (Fallback)",
                    "plan_type": risk,
                    "description": "‡πÅ‡∏ú‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á - ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
                    "total_investment": int(base_investment * 1.3),
                    "total_tax_saving": int(base_investment * 1.3 * 0.25),
                    "overall_risk": risk,
                    "allocations": []  # Simplified
                },
                {
                    "plan_id": "3",
                    "plan_name": "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 3 - ‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (Fallback)",
                    "plan_type": risk,
                    "description": "‡πÅ‡∏ú‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á - ‡πÉ‡∏ä‡πâ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà",
                    "total_investment": int(base_investment * 1.6),
                    "total_tax_saving": int(base_investment * 1.6 * 0.25),
                    "overall_risk": risk,
                    "allocations": []  # Simplified
                }
            ]
        }