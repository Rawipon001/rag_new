"""
AI Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Evaluation - ‡∏õ‡∏µ 2568 (‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)
‡πÉ‡∏ä‡πâ Prompt ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£
‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á raw response ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥ evaluation

‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå:
1. ‡πÅ‡∏™‡∏î‡∏á raw response ‡∏à‡∏≤‡∏Å OpenAI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å logs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
3. ‡∏ó‡∏≥ evaluation ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
"""

from langchain_openai import ChatOpenAI
import json
import os
import time
import asyncio
from typing import Dict, List, Any, Tuple
from pathlib import Path

# Import models ‡πÅ‡∏•‡∏∞ config
from app.models import TaxCalculationRequest, TaxCalculationResult
from app.config import settings


class AIServiceForEvaluation:
    """
    AI Service ‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Evaluation
    
    ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å:
    - ‡πÅ‡∏™‡∏î‡∏á raw response
    - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å logs
    - Verbose logging
    - ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
    """
    
    def __init__(self, verbose: bool = True, save_to_file: bool = True):
        """
        Args:
            verbose: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° debug
            save_to_file: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å logs ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        """
        self.llm = ChatOpenAI(
            model=settings.openai_model,
            temperature=0.3,  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
            openai_api_key=settings.openai_api_key
        )
        self.verbose = verbose
        self.save_to_file = save_to_file

        # üìä Retry statistics tracking
        self.retry_stats = {
            "total_calls": 0,
            "successful_first_try": 0,
            "retries_needed": 0,
            "total_retries": 0,
            "fallback_used": 0,
            "refusal_detected": 0
        }

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö logs
        if self.save_to_file:
            self.log_dir = Path(__file__).parent.parent.parent / "evaluation_logs"
            self.log_dir.mkdir(exist_ok=True)
            if self.verbose:
                print(f"üìÇ Log directory: {self.log_dir}")
    
    def generate_tax_optimization_prompt(
        self, 
        request: TaxCalculationRequest,
        tax_result: TaxCalculationResult,
        retrieved_context: str,
        expected_plans: Dict[str, Any]
    ) -> str:
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£
        
        üî• CRITICAL: Prompt ‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö ai_service.py ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
        """
        
        gross = tax_result.gross_income
        taxable = tax_result.taxable_income
        current_tax = tax_result.tax_amount
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ - ‡∏õ‡∏µ 2568
        max_rmf = min(gross * 0.30, 500000)
        max_thai_esg = 300000  # ‡πÉ‡∏´‡∏°‡πà‡∏õ‡∏µ 2568
        max_thai_esgx_new = 300000  # ‡πÉ‡∏´‡∏°‡πà‡∏õ‡∏µ 2568
        max_thai_esgx_ltf = 300000  # ‡πÉ‡∏´‡∏°‡πà‡∏õ‡∏µ 2568
        max_pension = min(gross * 0.15, 200000)
        max_pvd = min(gross * 0.15, 500000)
        
        remaining_rmf = max_rmf - request.rmf
        remaining_thai_esg = max_thai_esg - request.thai_esg
        remaining_thai_esgx_new = max_thai_esgx_new - request.thai_esgx_new
        remaining_thai_esgx_ltf = max_thai_esgx_ltf - request.thai_esgx_ltf
        remaining_pension = max_pension - request.pension_insurance
        remaining_pvd = max_pvd - request.provident_fund
        remaining_life = 100000 - request.life_insurance
        remaining_life_pension = 10000 - request.life_insurance_pension
        remaining_health = 25000 - request.health_insurance
        
        # ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°
        if taxable <= 150000:
            marginal_rate = 0
        elif taxable <= 300000:
            marginal_rate = 5
        elif taxable <= 500000:
            marginal_rate = 10
        elif taxable <= 750000:
            marginal_rate = 15
        elif taxable <= 1000000:
            marginal_rate = 20
        elif taxable <= 2000000:
            marginal_rate = 25
        elif taxable <= 5000000:
            marginal_rate = 30
        else:
            marginal_rate = 35
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        has_life_insurance = request.life_insurance > 0
        has_health_insurance = request.health_insurance > 0
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
        risk_map = {
            'low': '‡∏ï‡πà‡∏≥',
            'medium': '‡∏Å‡∏•‡∏≤‡∏á',
            'high': '‡∏™‡∏π‡∏á'
        }
        risk_thai = risk_map.get(request.risk_tolerance, request.risk_tolerance)
        risk_level = request.risk_tolerance
        
        # üéØ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÅ‡∏ö‡∏ö 3 ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏° ground truth (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ 100%)
        # Plan 1 (Conservative), Plan 2 (Balanced), Plan 3 (Aggressive)
        if gross < 600000:
            tier_1 = 40000   # Conservative
            tier_2 = 60000   # Balanced
            tier_3 = 80000   # Aggressive
        elif gross < 1000000:
            tier_1 = 60000
            tier_2 = 100000
            tier_3 = 150000
        elif gross < 1500000:
            tier_1 = 200000
            tier_2 = 350000
            tier_3 = 500000
        elif gross < 2000000:
            tier_1 = 300000
            tier_2 = 500000
            tier_3 = 800000
        elif gross < 3000000:
            tier_1 = 500000
            tier_2 = 800000
            tier_3 = 1200000
        else:  # 3,000,000+
            tier_1 = 800000
            tier_2 = 1200000
            tier_3 = 1800000

        potential_tax_saving = int(tier_3 * (marginal_rate / 100))

        # üéØ Define comprehensive pros/cons for all allocation categories
        ALLOCATION_PROS_CONS = {
            "RMF": {
                "pros": [
                    "‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏ñ‡∏∂‡∏á 30% ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ",
                    "‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏∏‡∏ô",
                    "‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì"
                ],
                "cons": [
                    "‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏∑‡∏≠‡∏à‡∏ô‡∏≠‡∏≤‡∏¢‡∏∏ 55 ‡∏õ‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏£‡∏ö 5 ‡∏õ‡∏µ",
                    "‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏õ‡∏µ",
                    "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô"
                ]
            },
            "SSF": {
                "pros": [
                    "‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á",
                    "‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß",
                    "‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏∞‡∏™‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏á‡∏Ñ‡∏±‡πà‡∏á"
                ],
                "cons": [
                    "‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏∑‡∏≠‡∏Ñ‡∏£‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10 ‡∏õ‡∏µ",
                    "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô",
                    "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏î‡πâ"
                ]
            },
            "ThaiESG": {
                "pros": [
                    "‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ 30% ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 300,000 ‡∏ö‡∏≤‡∏ó",
                    "‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô",
                    "‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏î‡∏µ‡∏à‡∏≤‡∏Å‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û"
                ],
                "cons": [
                    "‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏∑‡∏≠‡∏Ñ‡∏£‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏õ‡∏µ",
                    "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô",
                    "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î"
                ]
            },
            "ThaiESGX": {
                "pros": [
                    "‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ 30% ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 300,000 ‡∏ö‡∏≤‡∏ó",
                    "‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å LTF ‡πÄ‡∏î‡∏¥‡∏°",
                    "‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô"
                ],
                "cons": [
                    "‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏∑‡∏≠‡∏Ñ‡∏£‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏õ‡∏µ",
                    "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô",
                    "‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡∏à‡∏≥‡∏Å‡∏±‡∏î"
                ]
            },
            "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï": {
                "pros": [
                    "‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß",
                    "‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 100,000 ‡∏ö‡∏≤‡∏ó",
                    "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô"
                ],
                "cons": [
                    "‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≥",
                    "‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á",
                    "‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô"
                ]
            },
            "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û": {
                "pros": [
                    "‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•",
                    "‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 25,000 ‡∏ö‡∏≤‡∏ó",
                    "‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡∏≤‡∏á‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"
                ],
                "cons": [
                    "‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏¢‡∏∏",
                    "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô",
                    "‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô"
                ]
            },
            "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç": {
                "pros": [
                    "‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì",
                    "‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 15% ‡∏´‡∏£‡∏∑‡∏≠ 200,000 ‡∏ö‡∏≤‡∏ó",
                    "‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô"
                ],
                "cons": [
                    "‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏∑‡∏≠‡∏Ñ‡∏£‡∏≠‡∏á‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
                    "‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏∏‡∏ô",
                    "‡∏™‡∏†‡∏≤‡∏û‡∏Ñ‡∏•‡πà‡∏≠‡∏á‡∏ï‡πà‡∏≥"
                ]
            },
            "‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ä‡∏µ‡∏û": {
                "pros": [
                    "‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏ñ‡∏∂‡∏á 15% ‡∏´‡∏£‡∏∑‡∏≠ 500,000 ‡∏ö‡∏≤‡∏ó",
                    "‡∏ô‡∏≤‡∏¢‡∏à‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏ó‡∏ö‡πÄ‡∏á‡∏¥‡∏ô",
                    "‡∏™‡∏∞‡∏™‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß"
                ],
                "cons": [
                    "‡∏ñ‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
                    "‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó",
                    "‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏á‡∏≤‡∏ô‡∏ö‡πà‡∏≠‡∏¢"
                ]
            },
            "‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏ö‡∏≥‡πÄ‡∏´‡∏ô‡πá‡∏à‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£": {
                "pros": [
                    "‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏ñ‡∏∂‡∏á 500,000 ‡∏ö‡∏≤‡∏ó",
                    "‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏•‡∏™‡∏°‡∏ó‡∏ö‡πÄ‡∏á‡∏¥‡∏ô",
                    "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡∏™‡∏π‡∏á"
                ],
                "cons": [
                    "‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
                    "‡∏ñ‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì",
                    "‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πà‡∏≥"
                ]
            },
            "‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ": {
                "pros": [
                    "‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ 10% ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ",
                    "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏±‡∏á‡∏Ñ‡∏°",
                    "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏∏‡∏ç"
                ],
                "cons": [
                    "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô",
                    "‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≥‡∏Å‡∏±‡∏î",
                    "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô"
                ]
            },
            "‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤": {
                "pros": [
                    "‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ 2 ‡πÄ‡∏ó‡πà‡∏≤",
                    "‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤",
                    "‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ"
                ],
                "cons": [
                    "‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î",
                    "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô",
                    "‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10% ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ"
                ]
            },
            "‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏´‡∏∏‡πâ‡∏ô": {
                "pros": [
                    "‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏™‡∏π‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß",
                    "‡∏™‡∏†‡∏≤‡∏û‡∏Ñ‡∏•‡πà‡∏≠‡∏á‡∏™‡∏π‡∏á",
                    "‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•"
                ],
                "cons": [
                    "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î",
                    "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå",
                    "‡∏≠‡∏≤‡∏à‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÑ‡∏î‡πâ"
                ]
            }
        }

        # üéØ Extract ground truth text from expected_plans
        expected_text_plan_1 = ""
        expected_text_plan_2 = ""
        expected_text_plan_3 = ""
        allocations_guide = ""

        if expected_plans:
            # Check if it's the old format (plan_1, plan_2, plan_3) or new format (plans array)
            plan1 = expected_plans.get('plan_1', None)
            plan2 = expected_plans.get('plan_2', None)
            plan3 = expected_plans.get('plan_3', None)

            if plan1 and 'expected_text' in plan1:
                # Plan 1 - Extract from expected_text
                exp_text = plan1['expected_text']
                desc = exp_text.get('description', '')
                keywords = exp_text.get('keywords', [])
                key_points = exp_text.get('key_points', [])

                expected_text_plan_1 = f"""
                description: "{desc}"
                ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: {', '.join(keywords)}
                ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:
                {chr(10).join(['  - ' + point for point in key_points])}
                """

            if plan2 and 'expected_text' in plan2:
                # Plan 2 - Extract from expected_text
                exp_text = plan2['expected_text']
                desc = exp_text.get('description', '')
                keywords = exp_text.get('keywords', [])
                key_points = exp_text.get('key_points', [])

                expected_text_plan_2 = f"""
                description: "{desc}"
                ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: {', '.join(keywords)}
                ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:
                {chr(10).join(['  - ' + point for point in key_points])}
                """

            if plan3 and 'expected_text' in plan3:
                # Plan 3 - Extract from expected_text
                exp_text = plan3['expected_text']
                desc = exp_text.get('description', '')
                keywords = exp_text.get('keywords', [])
                key_points = exp_text.get('key_points', [])

                expected_text_plan_3 = f"""
                description: "{desc}"
                ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: {', '.join(keywords)}
                ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:
                {chr(10).join(['  - ' + point for point in key_points])}
                """

        # üîí Build comprehensive allocations guide from the dictionary
        allocations_guide = "\n\nüîí **MANDATORY PROS/CONS FOR EACH ALLOCATION CATEGORY:**\n"
        allocations_guide += "**You MUST use these exact pros/cons for each category. DO NOT create new ones!**\n"
        allocations_guide += "=" * 80 + "\n\n"

        for category, data in ALLOCATION_PROS_CONS.items():
            allocations_guide += f"**{category}:**\n"
            allocations_guide += f"  Pros (‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏±‡∏ß): {json.dumps(data['pros'], ensure_ascii=False)}\n"
            allocations_guide += f"  Cons (‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏±‡∏ß): {json.dumps(data['cons'], ensure_ascii=False)}\n\n"

        # üî• PROMPT ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ Ground Truth Text
        return f"""‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ ‡∏õ‡∏µ 2568

üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:
- ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°: {gross:,.0f} ‡∏ö‡∏≤‡∏ó
- ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: {taxable:,.0f} ‡∏ö‡∏≤‡∏ó
- ‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: {current_tax:,.0f} ‡∏ö‡∏≤‡∏ó
- ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°: {marginal_rate}%
- ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {risk_thai}

üí∞ ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö (‡∏õ‡∏µ 2568):
- RMF: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_rmf:,.0f} ‡∏ö‡∏≤‡∏ó (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_rmf:,.0f})
- ThaiESG: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_thai_esg:,.0f} ‡∏ö‡∏≤‡∏ó (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_thai_esg:,.0f})
- ThaiESGX (‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà): ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_thai_esgx_new:,.0f} ‡∏ö‡∏≤‡∏ó (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_thai_esgx_new:,.0f})
- ThaiESGX (‡∏à‡∏≤‡∏Å LTF): ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_thai_esgx_ltf:,.0f} ‡∏ö‡∏≤‡∏ó (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_thai_esgx_ltf:,.0f})
- ‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ä‡∏µ‡∏û: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_pvd:,.0f} ‡∏ö‡∏≤‡∏ó (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_pvd:,.0f})
- ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_pension:,.0f} ‡∏ö‡∏≤‡∏ó (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_pension:,.0f})
- ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_life:,.0f} ‡∏ö‡∏≤‡∏ó
- ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÅ‡∏ö‡∏ö‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_life_pension:,.0f} ‡∏ö‡∏≤‡∏ó
- ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_health:,.0f} ‡∏ö‡∏≤‡∏ó

üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡∏µ‡πâ:
- ‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô 3 ‡∏£‡∏∞‡∏î‡∏±‡∏ö: {tier_1:,.0f} / {tier_2:,.0f} / {tier_3:,.0f} ‡∏ö‡∏≤‡∏ó
- ‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÑ‡∏î‡πâ: ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {potential_tax_saving:,.0f} ‡∏ö‡∏≤‡∏ó

üè• ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô:
- ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï: {'‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß' if has_life_insurance else '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ - ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ'}
- ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û: {'‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß' if has_health_insurance else '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ - ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ'}

üÜï ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô‡∏õ‡∏µ 2568:
- ‚ùå SSF ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß
- ‚úÖ ThaiESG/ThaiESGX ‡∏°‡∏≤‡πÅ‡∏ó‡∏ô (‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô 300,000 ‡∏ö‡∏≤‡∏ó ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô 30%)
- ‚úÖ Easy e-Receipt ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 50,000 ‡∏ö‡∏≤‡∏ó
- ‚úÖ ‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏∞‡∏ö‡∏¥‡∏î‡∏≤‡∏°‡∏≤‡∏£‡∏î‡∏≤: 30,000 ‡∏ö‡∏≤‡∏ó/‡∏Ñ‡∏ô (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 4 ‡∏Ñ‡∏ô = 120,000 ‡∏ö‡∏≤‡∏ó)

üìö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Knowledge Base:
{retrieved_context}

üéØ ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à: ‡∏™‡∏£‡πâ‡∏≤‡∏á 3 ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô

üîí **‡∏Å‡∏é‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥ - ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ description ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:**

**‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà 1 (Conservative) - description ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ:**{expected_text_plan_1}

**‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà 2 (Balanced) - description ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ:**{expected_text_plan_2}

**‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà 3 (Aggressive) - description ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ:**{expected_text_plan_3}

**‡∏Å‡∏é‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç - ‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πä‡∏∞‡πÜ ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î:**

üìå **‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ description:**
1. ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà 1 (Conservative): total_investment = {tier_1:,.0f} ‡∏ö‡∏≤‡∏ó (‡πÄ‡∏ô‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô + ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
2. ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà 2 (Balanced): total_investment = {tier_2:,.0f} ‡∏ö‡∏≤‡∏ó (‡∏™‡∏°‡∏î‡∏∏‡∏• ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á)
3. ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà 3 (Aggressive): total_investment = {tier_3:,.0f} ‡∏ö‡∏≤‡∏ó (‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï + ‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
4. **üö´ ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô description - ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ï‡∏£‡∏á‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å description ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô**
5. **üö´ ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô description ‡πÉ‡∏´‡∏°‡πà - ‡πÉ‡∏ä‡πâ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å description ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô**
6. **üö´ description ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î - ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å**

üìå **‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Pros/Cons ‡πÉ‡∏ô allocations:**
7. **üîí CRITICAL: ‡∏ó‡∏∏‡∏Å allocation ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ pros ‡πÅ‡∏•‡∏∞ cons ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô**
8. **üîí ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô pros/cons ‡πÉ‡∏´‡∏°‡πà - ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ï‡∏£‡∏á‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠ category**
9. **üîí ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ category "RMF" ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ pros/cons ‡∏Ç‡∏≠‡∏á RMF ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô**
10. **üîí ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ category "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï" ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ pros/cons ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏à‡∏≤‡∏Å‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô**
11. **üîí pros ‡πÅ‡∏•‡∏∞ cons ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏î‡πÜ**

üìå **‡∏Å‡∏é‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:**
12. ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ú‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö "{risk_level}"
13. ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (keywords) ‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô (key_points) ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å allocations
{'14. ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ú‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20,000 ‡∏ö‡∏≤‡∏ó' if not has_life_insurance else ''}
{'15. ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ú‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 15,000 ‡∏ö‡∏≤‡∏ó' if not has_health_insurance else ''}
16. ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô RMF ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà (‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á) ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á
17. **‡πÉ‡∏ä‡πâ ThaiESG/ThaiESGX ‡πÅ‡∏ó‡∏ô SSF** (SSF ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏õ‡∏µ 2568)
18. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á (1,500,000+): ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (‡∏ô‡∏±‡∏ö 2 ‡πÄ‡∏ó‡πà‡∏≤)

**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ pros/cons ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠:**

‡∏´‡∏≤‡∏Å allocation ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "RMF" ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ:
```json
{{
  "category": "RMF",
  "percentage": 50,
  "risk_level": "medium",
  "pros": {json.dumps(ALLOCATION_PROS_CONS.get("RMF", {}).get("pros", []), ensure_ascii=False)},
  "cons": {json.dumps(ALLOCATION_PROS_CONS.get("RMF", {}).get("cons", []), ensure_ascii=False)}
}}
```

‡∏´‡∏≤‡∏Å allocation ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï" ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ:
```json
{{
  "category": "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
  "percentage": 30,
  "risk_level": "low",
  "pros": {json.dumps(ALLOCATION_PROS_CONS.get("‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï", {}).get("pros", []), ensure_ascii=False)},
  "cons": {json.dumps(ALLOCATION_PROS_CONS.get("‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï", {}).get("cons", []), ensure_ascii=False)}
}}
```

**‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á JSON ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:**

```json
{{
  "plans": [
    {{
      "plan_id": "1",
      "plan_name": "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 1 - ‡πÄ‡∏ô‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô",
      "plan_type": "{risk_level}",
      "description": "‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á ‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏û‡∏≠‡πÄ‡∏´‡∏°‡∏≤‡∏∞",
      "total_investment": {tier_1},
      "total_tax_saving": {int(tier_1 * marginal_rate / 100)},
      "overall_risk": "{risk_level}",
      "allocations": [...]
    }},
    {{
      "plan_id": "2",
      "plan_name": "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 2 - ‡∏™‡∏°‡∏î‡∏∏‡∏•",
      "plan_type": "{risk_level}",
      "description": "‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡πÄ‡∏ô‡πâ‡∏ô RMF + ThaiESG",
      "total_investment": {tier_2},
      "total_tax_saving": {int(tier_2 * marginal_rate / 100)},
      "overall_risk": "{risk_level}",
      "allocations": [...]
    }},
    {{
      "plan_id": "3",
      "plan_name": "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 3 - ‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
      "plan_type": "{risk_level}",
      "description": "‡πÄ‡∏ô‡πâ‡∏ô‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡πÉ‡∏ä‡πâ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà",
      "total_investment": {tier_3},
      "total_tax_saving": {int(tier_3 * marginal_rate / 100)},
      "overall_risk": "{risk_level}",
      "allocations": [...]
    }}
  ]
}}
```

**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:**

üìå **‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö description:**
- **üîí üîí üîí CRITICAL: ‡πÉ‡∏ä‡πâ description ‡∏ï‡∏£‡∏á‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô**
- **üîí ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "description:" ‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÉ‡∏ô field "description" ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô**
- **üîí ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏ï‡∏¥‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏î‡∏ó‡∏≠‡∏ô description - ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô**

üìå **‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pros/cons ‡πÉ‡∏ô allocations:**
- **üîí üîí üîí CRITICAL: ‡πÉ‡∏ä‡πâ pros ‡πÅ‡∏•‡∏∞ cons ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô**
- **üîí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ category ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (‡πÄ‡∏ä‡πà‡∏ô "RMF", "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï") ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å pros/cons ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏±‡∏ß**
- **üîí ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô pros/cons ‡πÉ‡∏´‡∏°‡πà - ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç - ‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏±‡∏î‡∏ó‡∏≠‡∏ô - ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!**
- **üîí pros ‡πÅ‡∏•‡∏∞ cons ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á string ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£**

üìå **‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç:**
- **‡πÉ‡∏ä‡πâ total_investment ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:** Plan 1 = {tier_1:,.0f}, Plan 2 = {tier_2:,.0f}, Plan 3 = {tier_3:,.0f}
- **‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ total_investment ‡∏´‡∏£‡∏∑‡∏≠ total_tax_saving** (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ Python)
- **‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà investment_amount ‡πÅ‡∏•‡∏∞ tax_saving ‡πÉ‡∏ô allocations** (‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)

üìå **‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:**
- ‡πÅ‡∏ï‡πà‡∏•‡∏∞ allocation ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å field: category, percentage, risk_level, pros, cons
- **percentage ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á 100** (‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 99-101)
- **‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏ä‡πâ SSF** ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏õ‡∏µ 2568 ‡πÉ‡∏ä‡πâ ThaiESG/ThaiESGX ‡πÅ‡∏ó‡∏ô

‚ö†Ô∏è **‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:**
- **description ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏ï‡∏±‡∏ß 100% ‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ - ‡∏≠‡∏¢‡πà‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà!**
- **pros/cons ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏ï‡∏±‡∏ß 100% ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠ - ‡∏≠‡∏¢‡πà‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà!**
- **‡∏´‡∏≤‡∏Å category ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ pros/cons ‡∏ï‡∏£‡∏á‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!**

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ markdown ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô:"""

    def _is_api_refusal(self, response_text: str) -> bool:
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏à‡∏≤‡∏Å OpenAI ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

        Returns:
            True ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò, False ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô response ‡∏õ‡∏Å‡∏ï‡∏¥
        """
        refusal_patterns = [
            "I'm sorry, I can't assist",
            "I cannot assist",
            "I'm unable to assist",
            "I can't help with that",
            "I'm not able to help",
            "I apologize, but I cannot",
            "I'm sorry, but I cannot"
        ]

        response_lower = response_text.lower().strip()

        for pattern in refusal_patterns:
            if pattern.lower() in response_lower:
                return True

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response ‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£) ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ JSON
        if len(response_text) < 100 and "{" not in response_text:
            return True

        return False

    def get_retry_statistics(self) -> Dict[str, Any]:
        """
        ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£ retry

        Returns:
            Dictionary ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£ retry
        """
        stats = self.retry_stats.copy()

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì success rate
        if stats["total_calls"] > 0:
            stats["success_rate"] = (stats["successful_first_try"] / stats["total_calls"]) * 100
            stats["retry_rate"] = (stats["retries_needed"] / stats["total_calls"]) * 100
            stats["fallback_rate"] = (stats["fallback_used"] / stats["total_calls"]) * 100
        else:
            stats["success_rate"] = 0.0
            stats["retry_rate"] = 0.0
            stats["fallback_rate"] = 0.0

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ retries ‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á retry
        if stats["retries_needed"] > 0:
            stats["avg_retries_when_needed"] = stats["total_retries"] / stats["retries_needed"]
        else:
            stats["avg_retries_when_needed"] = 0.0

        return stats

    def print_retry_statistics(self):
        """
        ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£ retry ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
        """
        stats = self.get_retry_statistics()

        print("\n" + "=" * 80)
        print("üìä API RETRY STATISTICS")
        print("=" * 80)
        print(f"Total API Calls:           {stats['total_calls']}")
        print(f"‚úÖ Successful (1st try):    {stats['successful_first_try']} ({stats['success_rate']:.1f}%)")
        print(f"üîÑ Needed Retries:          {stats['retries_needed']} ({stats['retry_rate']:.1f}%)")
        print(f"üìà Total Retry Attempts:    {stats['total_retries']}")
        print(f"‚ö†Ô∏è  Fallback Used:           {stats['fallback_used']} ({stats['fallback_rate']:.1f}%)")
        print(f"üö´ API Refusals Detected:   {stats['refusal_detected']}")

        if stats['retries_needed'] > 0:
            print(f"üìä Avg Retries (when needed): {stats['avg_retries_when_needed']:.2f}")

        print("=" * 80 + "\n")

    async def generate_recommendations(
        self,
        request: TaxCalculationRequest,
        tax_result: TaxCalculationResult,
        retrieved_context: str,
        expected_plans: Dict[str, Any],
        test_case_id: int = 0,
        max_retries: int = 3
    ) -> Tuple[Dict[str, Any], str]:
        """
        ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OpenAI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ‡∏û‡∏£‡πâ‡∏≠‡∏° retry logic

        Args:
            max_retries: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà (default = 3)

        Returns:
            (parsed_result, raw_response)
        """
        # Track statistics
        self.retry_stats["total_calls"] += 1

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt (‡∏ô‡∏≠‡∏Å loop ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
        prompt = self.generate_tax_optimization_prompt(
            request, tax_result, retrieved_context, expected_plans
        )

        # ‡πÅ‡∏™‡∏î‡∏á Prompt (‡∏ñ‡πâ‡∏≤ verbose)
        if self.verbose:
            print("\n" + "=" * 80)
            print("üì§ PROMPT SENT TO OPENAI:")
            print("=" * 80)
            print(prompt[:1500] + "...[truncated]" if len(prompt) > 1500 else prompt)
            print("=" * 80 + "\n")

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Prompt ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        if self.save_to_file:
            prompt_file = self.log_dir / f"prompt_test_case_{test_case_id}.txt"
            with open(prompt_file, 'w', encoding='utf-8') as f:
                f.write(prompt)
            if self.verbose:
                print(f"üíæ Saved prompt to: {prompt_file}\n")

        # üîÑ RETRY LOOP with exponential backoff
        for attempt in range(max_retries + 1):  # +1 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà retry
            try:
                # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£ retry
                if attempt > 0:
                    if self.verbose:
                        print(f"\nüîÑ Retry attempt {attempt}/{max_retries}...")
                    self.retry_stats["total_retries"] += 1

                    # Exponential backoff: 1s, 2s, 4s
                    wait_time = 2 ** (attempt - 1)
                    if self.verbose:
                        print(f"‚è≥ Waiting {wait_time}s before retry...")
                    await asyncio.sleep(wait_time)

                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OpenAI
                if self.verbose:
                    print("ü§ñ Calling OpenAI API...")

                response = await self.llm.ainvoke(prompt)
                raw_response = response.content

                # üö´ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô API refusal ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if self._is_api_refusal(raw_response):
                    self.retry_stats["refusal_detected"] += 1

                    if self.verbose:
                        print("\n" + "=" * 80)
                        print("üö´ API REFUSAL DETECTED:")
                        print("=" * 80)
                        print(raw_response[:500])
                        print("=" * 80 + "\n")

                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å refusal
                    if self.save_to_file:
                        refusal_file = self.log_dir / f"refusal_test_case_{test_case_id}_attempt_{attempt}.txt"
                        with open(refusal_file, 'w', encoding='utf-8') as f:
                            f.write(f"API Refusal detected on attempt {attempt}\n\n")
                            f.write(raw_response)
                        if self.verbose:
                            print(f"üíæ Saved refusal to: {refusal_file}\n")

                    # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ retry ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                    if attempt < max_retries:
                        if self.verbose:
                            print(f"‚ö†Ô∏è  API refused request, will retry... ({attempt + 1}/{max_retries})")
                        continue
                    else:
                        # ‡∏´‡∏°‡∏î retry ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ fallback
                        if self.verbose:
                            print("‚ö†Ô∏è  All retries exhausted, using fallback response")
                        self.retry_stats["fallback_used"] += 1
                        if attempt > 0:
                            self.retry_stats["retries_needed"] += 1
                        return self._get_fallback_response(request, tax_result), raw_response

                # ‡πÅ‡∏™‡∏î‡∏á Raw Response
                if self.verbose:
                    print("\n" + "=" * 80)
                    print("üì• RAW RESPONSE FROM OPENAI:")
                    print("=" * 80)
                    print(raw_response[:2000] if len(raw_response) > 2000 else raw_response)
                    if len(raw_response) > 2000:
                        print(f"...[truncated, total {len(raw_response)} characters]")
                    print("=" * 80 + "\n")

                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Raw Response ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
                if self.save_to_file:
                    response_file = self.log_dir / f"raw_response_test_case_{test_case_id}.txt"
                    with open(response_file, 'w', encoding='utf-8') as f:
                        f.write(raw_response)
                    if self.verbose:
                        print(f"üíæ Saved raw response to: {response_file}\n")

                # Parse JSON
                plans_text = raw_response.strip()

                # ‡∏•‡∏ö markdown code blocks ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                if plans_text.startswith("```json"):
                    plans_text = plans_text[7:]
                    if self.verbose:
                        print("üîß Removed ```json prefix")
                if plans_text.startswith("```"):
                    plans_text = plans_text[3:]
                    if self.verbose:
                        print("üîß Removed ``` prefix")
                if plans_text.endswith("```"):
                    plans_text = plans_text[:-3]
                    if self.verbose:
                        print("üîß Removed ``` suffix")

                plans_text = plans_text.strip()
                result = json.loads(plans_text)

                # ‡πÅ‡∏™‡∏î‡∏á Parsed Result
                if self.verbose:
                    print("\n" + "=" * 80)
                    print("üìä PARSED RESULT:")
                    print("=" * 80)
                    print(json.dumps(result, indent=2, ensure_ascii=False)[:1500])
                    print("=" * 80 + "\n")
                    print(f"‚úÖ Successfully parsed {len(result.get('plans', []))} plans\n")

                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Parsed Result ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
                if self.save_to_file:
                    parsed_file = self.log_dir / f"parsed_result_test_case_{test_case_id}.json"
                    with open(parsed_file, 'w', encoding='utf-8') as f:
                        json.dump(result, f, indent=2, ensure_ascii=False)
                    if self.verbose:
                        print(f"üíæ Saved parsed result to: {parsed_file}\n")

                # Validate
                self._validate_response(result)

                # ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!
                if attempt == 0:
                    self.retry_stats["successful_first_try"] += 1
                else:
                    self.retry_stats["retries_needed"] += 1
                    if self.verbose:
                        print(f"‚úÖ Success after {attempt} retry/retries\n")

                return result, raw_response

            except json.JSONDecodeError as e:
                print(f"\n‚ùå JSON Parse Error (attempt {attempt + 1}/{max_retries + 1}): {e}")
                print(f"\nüìÑ Raw Response was:")
                print("=" * 80)
                print(raw_response[:1000] if 'raw_response' in locals() else "No response")
                print("=" * 80)

                # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ retry ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                if attempt < max_retries:
                    if self.verbose:
                        print(f"‚ö†Ô∏è  JSON parse failed, will retry... ({attempt + 1}/{max_retries})")
                    continue
                else:
                    # ‡∏´‡∏°‡∏î retry ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ fallback
                    if self.save_to_file:
                        error_file = self.log_dir / f"error_test_case_{test_case_id}.txt"
                        with open(error_file, 'w', encoding='utf-8') as f:
                            f.write(f"JSON Parse Error after {max_retries} retries: {e}\n\n")
                            f.write("Raw Response:\n")
                            f.write(raw_response if 'raw_response' in locals() else "No response")
                        print(f"\nüíæ Saved error to: {error_file}\n")

                    self.retry_stats["fallback_used"] += 1
                    if attempt > 0:
                        self.retry_stats["retries_needed"] += 1
                    return self._get_fallback_response(request, tax_result), raw_response if 'raw_response' in locals() else ""

            except Exception as e:
                print(f"\n‚ùå Error (attempt {attempt + 1}/{max_retries + 1}): {e}")
                import traceback
                traceback.print_exc()

                # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ retry ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                if attempt < max_retries:
                    if self.verbose:
                        print(f"‚ö†Ô∏è  Error occurred, will retry... ({attempt + 1}/{max_retries})")
                    continue
                else:
                    # ‡∏´‡∏°‡∏î retry ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ fallback
                    if self.save_to_file:
                        error_file = self.log_dir / f"error_test_case_{test_case_id}.txt"
                        with open(error_file, 'w', encoding='utf-8') as f:
                            f.write(f"Error after {max_retries} retries: {e}\n\n")
                            f.write(traceback.format_exc())
                        print(f"\nüíæ Saved error to: {error_file}\n")

                    self.retry_stats["fallback_used"] += 1
                    if attempt > 0:
                        self.retry_stats["retries_needed"] += 1
                    return self._get_fallback_response(request, tax_result), ""

        # ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ ‡πÅ‡∏ï‡πà‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ
        self.retry_stats["fallback_used"] += 1
        return self._get_fallback_response(request, tax_result), ""
    
    def _validate_response(self, result: Dict[str, Any]):
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á response
        """
        if "plans" not in result:
            raise ValueError("Missing 'plans' key in response")
        
        if len(result["plans"]) != 3:
            raise ValueError(f"Expected 3 plans, got {len(result['plans'])}")
        
        required_plan_fields = ["plan_id", "plan_name", "plan_type", "description",
                               "total_investment", "total_tax_saving", "overall_risk", "allocations"]
        required_alloc_fields = ["category", "percentage", "risk_level", "pros", "cons"]
        
        for i, plan in enumerate(result["plans"]):
            for field in required_plan_fields:
                if field not in plan:
                    raise ValueError(f"Plan {i+1} missing field: {field}")
            
            if not plan["allocations"]:
                raise ValueError(f"Plan {i+1} has empty allocations")
            
            for j, alloc in enumerate(plan["allocations"]):
                for field in required_alloc_fields:
                    if field not in alloc:
                        raise ValueError(f"Plan {i+1}, Allocation {j+1} missing field: {field}")
        
        if self.verbose:
            print("‚úÖ Response validation passed")
    
    def _get_fallback_response(
        self,
        request: TaxCalculationRequest,
        tax_result: TaxCalculationResult
    ) -> Dict[str, Any]:
        """
        ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Å‡∏£‡∏ì‡∏µ AI ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        """
        if self.verbose:
            print("\n‚ö†Ô∏è  Using fallback response...\n")
        
        gross = tax_result.gross_income
        risk = request.risk_tolerance
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        if gross < 1000000:
            base_investment = 150000
        elif gross < 2000000:
            base_investment = 500000
        else:
            base_investment = 1000000
        
        return {
            "plans": [
                {
                    "plan_id": "1",
                    "plan_name": "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 1 - ‡πÄ‡∏ô‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô (Fallback)",
                    "plan_type": risk,
                    "description": "‡πÅ‡∏ú‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á - ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á",
                    "total_investment": base_investment,
                    "total_tax_saving": int(base_investment * 0.25),
                    "overall_risk": risk,
                    "allocations": [
                        {
                            "category": "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
                            "investment_amount": int(base_investment * 0.25),
                            "percentage": 25,
                            "tax_saving": int(base_investment * 0.0625),
                            "risk_level": "low",
                            "pros": ["‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á", "‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"],
                            "cons": ["‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ï‡πà‡∏≥"]
                        },
                        {
                            "category": "RMF",
                            "investment_amount": int(base_investment * 0.50),
                            "percentage": 50,
                            "tax_saving": int(base_investment * 0.125),
                            "risk_level": risk,
                            "pros": ["‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏π‡∏á", "‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏î‡∏µ"],
                            "cons": ["‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏∑‡∏≠ 5 ‡∏õ‡∏µ"]
                        },
                        {
                            "category": "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç",
                            "investment_amount": int(base_investment * 0.25),
                            "percentage": 25,
                            "tax_saving": int(base_investment * 0.0625),
                            "risk_level": "low",
                            "pros": ["‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô"],
                            "cons": ["‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô‡∏¢‡∏≤‡∏ß"]
                        }
                    ]
                },
                {
                    "plan_id": "2",
                    "plan_name": "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 2 - ‡∏™‡∏°‡∏î‡∏∏‡∏• (Fallback)",
                    "plan_type": risk,
                    "description": "‡πÅ‡∏ú‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á - ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
                    "total_investment": int(base_investment * 1.3),
                    "total_tax_saving": int(base_investment * 1.3 * 0.25),
                    "overall_risk": risk,
                    "allocations": []  # Simplified
                },
                {
                    "plan_id": "3",
                    "plan_name": "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 3 - ‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (Fallback)",
                    "plan_type": risk,
                    "description": "‡πÅ‡∏ú‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á - ‡πÉ‡∏ä‡πâ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà",
                    "total_investment": int(base_investment * 1.6),
                    "total_tax_saving": int(base_investment * 1.6 * 0.25),
                    "overall_risk": risk,
                    "allocations": []  # Simplified
                }
            ]
        }