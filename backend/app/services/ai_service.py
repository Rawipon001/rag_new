"""
AI Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏†‡∏≤‡∏©‡∏µ
Version: ‡∏õ‡∏µ 2568 - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ThaiESG/ThaiESGX ‡πÅ‡∏ó‡∏ô SSF
"""

from langchain_openai import ChatOpenAI
import json
from typing import Dict, List, Any

from app.models import TaxCalculationRequest, TaxCalculationResult
from app.config import settings


class AIService:
    """AI Service ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ ‡∏õ‡∏µ 2568"""
    
    def __init__(self):
        self.llm = ChatOpenAI(
            model=settings.openai_model,
            temperature=0.3,
            openai_api_key=settings.openai_api_key
        )
    
    def generate_tax_optimization_prompt(
        self, 
        request: TaxCalculationRequest,
        tax_result: TaxCalculationResult,
        retrieved_context: str
    ) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö JSON ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ 2568"""
        
        gross = tax_result.gross_income
        taxable = tax_result.taxable_income
        current_tax = tax_result.tax_amount
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ - ‡∏õ‡∏µ 2568
        max_rmf = min(gross * 0.30, 500000)
        max_thai_esg = 300000  # ‡πÉ‡∏´‡∏°‡πà‡∏õ‡∏µ 2568
        max_thai_esgx_new = 300000  # ‡πÉ‡∏´‡∏°‡πà‡∏õ‡∏µ 2568
        max_thai_esgx_ltf = 300000  # ‡πÉ‡∏´‡∏°‡πà‡∏õ‡∏µ 2568
        max_pension = min(gross * 0.15, 200000)
        max_pvd = min(gross * 0.15, 500000)
        
        remaining_rmf = max_rmf - request.rmf
        remaining_thai_esg = max_thai_esg - request.thai_esg
        remaining_thai_esgx_new = max_thai_esgx_new - request.thai_esgx_new
        remaining_thai_esgx_ltf = max_thai_esgx_ltf - request.thai_esgx_ltf
        remaining_pension = max_pension - request.pension_insurance
        remaining_pvd = max_pvd - request.provident_fund
        remaining_life = 100000 - request.life_insurance
        remaining_life_pension = 10000 - request.life_insurance_pension  # ‡πÉ‡∏´‡∏°‡πà‡∏õ‡∏µ 2568
        remaining_health = 25000 - request.health_insurance
        
        # ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°
        if taxable <= 150000:
            marginal_rate = 0
        elif taxable <= 300000:
            marginal_rate = 5
        elif taxable <= 500000:
            marginal_rate = 10
        elif taxable <= 750000:
            marginal_rate = 15
        elif taxable <= 1000000:
            marginal_rate = 20
        elif taxable <= 2000000:
            marginal_rate = 25
        elif taxable <= 5000000:
            marginal_rate = 30
        else:
            marginal_rate = 35
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        has_life_insurance = request.life_insurance > 0
        has_health_insurance = request.health_insurance > 0
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
        risk_map = {
            'low': '‡∏ï‡πà‡∏≥',
            'medium': '‡∏Å‡∏•‡∏≤‡∏á',
            'high': '‡∏™‡∏π‡∏á'
        }
        risk_thai = risk_map.get(request.risk_tolerance, request.risk_tolerance)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î risk_level
        risk_level = request.risk_tolerance
        
        # üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
        if gross < 600000:
            suggested_min = 60000
            suggested_max = 150000
        elif gross < 1000000:
            suggested_min = 150000
            suggested_max = 300000
        elif gross < 1500000:
            suggested_min = 300000
            suggested_max = 500000
        elif gross < 2000000:
            suggested_min = 500000
            suggested_max = 800000
        elif gross < 3000000:
            suggested_min = 800000
            suggested_max = 1200000
        else:  # 3,000,000+
            suggested_min = 1200000
            suggested_max = 1800000
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
        potential_tax_saving = int(suggested_max * (marginal_rate / 100))
        
        return f"""‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ ‡∏õ‡∏µ 2568

üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:
- ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°: {gross:,.0f} ‡∏ö‡∏≤‡∏ó
- ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: {taxable:,.0f} ‡∏ö‡∏≤‡∏ó
- ‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: {current_tax:,.0f} ‡∏ö‡∏≤‡∏ó
- ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°: {marginal_rate}%
- ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {risk_thai}

üí∞ ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö (‡∏õ‡∏µ 2568):
- RMF: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_rmf:,.0f} ‡∏ö‡∏≤‡∏ó (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_rmf:,.0f})
- ThaiESG: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_thai_esg:,.0f} ‡∏ö‡∏≤‡∏ó (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_thai_esg:,.0f})
- ThaiESGX (‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà): ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_thai_esgx_new:,.0f} ‡∏ö‡∏≤‡∏ó (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_thai_esgx_new:,.0f})
- ThaiESGX (‡∏à‡∏≤‡∏Å LTF): ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_thai_esgx_ltf:,.0f} ‡∏ö‡∏≤‡∏ó (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_thai_esgx_ltf:,.0f})
- ‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ä‡∏µ‡∏û: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_pvd:,.0f} ‡∏ö‡∏≤‡∏ó (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_pvd:,.0f})
- ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_pension:,.0f} ‡∏ö‡∏≤‡∏ó (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {max_pension:,.0f})
- ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_life:,.0f} ‡∏ö‡∏≤‡∏ó
- ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÅ‡∏ö‡∏ö‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_life_pension:,.0f} ‡∏ö‡∏≤‡∏ó
- ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_health:,.0f} ‡∏ö‡∏≤‡∏ó

üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡∏µ‡πâ:
- ‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {suggested_min:,.0f} - {suggested_max:,.0f} ‡∏ö‡∏≤‡∏ó
- ‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÑ‡∏î‡πâ: ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {potential_tax_saving:,.0f} ‡∏ö‡∏≤‡∏ó

üè• ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô:
- ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï: {'‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß' if has_life_insurance else '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ - ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ'}
- ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û: {'‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß' if has_health_insurance else '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ - ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ'}

üÜï ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô‡∏õ‡∏µ 2568:
- ‚ùå SSF ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß
- ‚úÖ ThaiESG/ThaiESGX ‡∏°‡∏≤‡πÅ‡∏ó‡∏ô (‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô 300,000 ‡∏ö‡∏≤‡∏ó ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô 30%)
- ‚úÖ Easy e-Receipt ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 50,000 ‡∏ö‡∏≤‡∏ó
- ‚úÖ ‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏∞‡∏ö‡∏¥‡∏î‡∏≤‡∏°‡∏≤‡∏£‡∏î‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 60,000 ‡∏ö‡∏≤‡∏ó/‡∏Ñ‡∏ô

üìö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Knowledge Base:
{retrieved_context}

üéØ ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à: ‡∏™‡∏£‡πâ‡∏≤‡∏á 3 ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô

**‡∏Å‡∏é‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:**
1. ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á {suggested_min:,.0f} - {suggested_max:,.0f} ‡∏ö‡∏≤‡∏ó
2. ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ú‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö "{risk_level}"
3. ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏ô‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô + ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏Å‡∏•‡πâ minimum)
4. ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏™‡∏°‡∏î‡∏∏‡∏• ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÜ)
5. ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà 3: ‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï + ‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏Å‡∏•‡πâ maximum)
{'6. ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ú‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20,000 ‡∏ö‡∏≤‡∏ó' if not has_life_insurance else ''}
{'7. ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ú‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 15,000 ‡∏ö‡∏≤‡∏ó' if not has_health_insurance else ''}
8. ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô RMF ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà (‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á) ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á
9. **‡πÉ‡∏ä‡πâ ThaiESG/ThaiESGX ‡πÅ‡∏ó‡∏ô SSF** (SSF ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏õ‡∏µ 2568)
10. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á (1,500,000+): ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (‡∏ô‡∏±‡∏ö 2 ‡πÄ‡∏ó‡πà‡∏≤)

**‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á JSON ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:**

```json
{{
  "plans": [
    {{
      "plan_id": "1",
      "plan_name": "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 1 - ‡πÄ‡∏ô‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô",
      "plan_type": "{risk_level}",
      "description": "‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á ‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏û‡∏≠‡πÄ‡∏´‡∏°‡∏≤‡∏∞",
      "total_investment": {suggested_min},
      "total_tax_saving": {int(suggested_min * marginal_rate / 100)},
      "overall_risk": "{risk_level}",
      "allocations": [
        {{
          "category": "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
          "percentage": 40.0,
          "risk_level": "low",
          "pros": ["‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥", "‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô"],
          "cons": ["‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ï‡πà‡∏≥", "‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏¢‡∏∏"]
        }},
        {{
          "category": "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç",
          "percentage": 25.0,
          "risk_level": "low",
          "pros": ["‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô 3-4%", "‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏¢‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì"],
          "cons": ["‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô‡∏¢‡∏≤‡∏ß", "‡∏ñ‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô"]
        }},
        {{
          "category": "RMF ‡∏ï‡∏£‡∏≤‡∏™‡∏≤‡∏£‡∏´‡∏ô‡∏µ‡πâ/‡∏ú‡∏™‡∏°",
          "percentage": 35.0,
          "risk_level": "{risk_level}",
          "pros": ["‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏π‡∏á", "‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏ù‡∏≤‡∏Å"],
          "cons": ["‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏∑‡∏≠‡∏à‡∏ô‡∏≠‡∏≤‡∏¢‡∏∏ 55 ‡∏õ‡∏µ ‡∏´‡∏£‡∏∑‡∏≠ 5 ‡∏õ‡∏µ", "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏•‡∏≤‡∏î"]
        }}
      ]
    }},
    {{
      "plan_id": "2",
      "plan_name": "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 2 - ‡∏™‡∏°‡∏î‡∏∏‡∏•",
      "plan_type": "{risk_level}",
      "description": "‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡πÄ‡∏ô‡πâ‡∏ô RMF + ThaiESG",
      "total_investment": {int((suggested_min + suggested_max) / 2)},
      "total_tax_saving": {int((suggested_min + suggested_max) / 2 * marginal_rate / 100)},
      "overall_risk": "{risk_level}",
      "allocations": [
        {{
          "category": "RMF",
          "percentage": 40.0,
          "risk_level": "{risk_level}",
          "pros": ["‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 30%", "‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì"],
          "cons": ["‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏∏‡∏Å‡∏õ‡∏µ", "‡∏ñ‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏û‡∏¥‡πà‡∏°"]
        }},
        {{
          "category": "ThaiESG",
          "percentage": 25.0,
          "risk_level": "{risk_level}",
          "pros": ["‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏Å‡∏ß‡πà‡∏≤ RMF", "‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô ESG", "‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô 30%"],
          "cons": ["‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏∑‡∏≠‡∏Ñ‡∏£‡∏ö 8 ‡∏õ‡∏µ", "‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏´‡∏°‡πà"]
        }},
        {{
          "category": "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
          "percentage": 20.0,
          "risk_level": "low",
          "pros": ["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", "‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ"],
          "cons": ["‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ï‡πà‡∏≥", "‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏¢‡∏∏"]
        }},
        {{
          "category": "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç",
          "percentage": 15.0,
          "risk_level": "low",
          "pros": ["‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô", "‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì"],
          "cons": ["‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô‡∏¢‡∏≤‡∏ß"]
        }}
      ]
    }},
    {{
      "plan_id": "3",
      "plan_name": "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 3 - ‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
      "plan_type": "{risk_level}",
      "description": "‡πÄ‡∏ô‡πâ‡∏ô‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡πÉ‡∏ä‡πâ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà",
      "total_investment": {suggested_max},
      "total_tax_saving": {int(suggested_max * marginal_rate / 100)},
      "overall_risk": "{risk_level}",
      "allocations": [
        {{
          "category": "RMF (‡πÉ‡∏ä‡πâ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà)",
          "percentage": 35.0,
          "risk_level": "{risk_level}",
          "pros": ["‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", "‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏î‡∏µ"],
          "cons": ["‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏∏‡∏Å‡∏õ‡∏µ", "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏•‡∏≤‡∏î"]
        }},
        {{
          "category": "ThaiESG/ThaiESGX",
          "percentage": 25.0,
          "risk_level": "{risk_level}",
          "pros": ["‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏†‡∏≤‡∏©‡∏µ 30%", "‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô ESG", "‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô"],
          "cons": ["‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏∑‡∏≠ 8 ‡∏õ‡∏µ", "‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡πÉ‡∏´‡∏°‡πà"]
        }},
        {{
          "category": "‡∏Å‡∏≠‡∏á‡∏ó‡∏∏‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ä‡∏µ‡∏û (PVD)",
          "percentage": 20.0,
          "risk_level": "medium",
          "pros": ["‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ", "‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á"],
          "cons": ["‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", "‡∏ñ‡∏≠‡∏ô‡∏¢‡∏≤‡∏Å"]
        }},
        {{
          "category": "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç",
          "percentage": 10.0,
          "risk_level": "low",
          "pros": ["‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô", "‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ 15%"],
          "cons": ["‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô‡∏¢‡∏≤‡∏ß"]
        }},
        {{
          "category": "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï + ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
          "percentage": 7.0,
          "risk_level": "low",
          "pros": ["‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ", "‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ"],
          "cons": ["‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ï‡πà‡∏≥"]
        }},
        {{
          "category": "Easy e-Receipt",
          "percentage": 3.0,
          "risk_level": "low",
          "pros": ["‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥", "‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ 50,000", "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°"],
          "cons": ["‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ú‡πà‡∏≤‡∏ô e-payment"]
        }}
      ]
    }}
  ]
}}
```

**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:**
- ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
- ‡πÅ‡∏ï‡πà‡∏•‡∏∞ allocation ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å field: category, percentage, risk_level, pros, cons
- **‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà investment_amount ‡πÅ‡∏•‡∏∞ tax_saving ‡πÉ‡∏ô allocations** (‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
- pros ‡πÅ‡∏•‡∏∞ cons ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á string
- **percentage ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á 100** (‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 99-101)
- **‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏ä‡πâ SSF** ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏õ‡∏µ 2568 ‡πÉ‡∏ä‡πâ ThaiESG/ThaiESGX ‡πÅ‡∏ó‡∏ô
- ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà 3 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ 1,500,000+ ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ markdown ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô:"""
    
    async def generate_recommendations(
        self,
        request: TaxCalculationRequest,
        tax_result: TaxCalculationResult,
        retrieved_context: str
    ) -> Dict[str, Any]:
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OpenAI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô"""
        try:
            prompt = self.generate_tax_optimization_prompt(
                request, tax_result, retrieved_context
            )
            
            response = await self.llm.ainvoke(prompt)
            raw_response = response.content
            
            # Parse JSON
            plans_text = raw_response.strip()
            
            # ‡∏•‡∏ö markdown code blocks
            if plans_text.startswith("```json"):
                plans_text = plans_text[7:]
            if plans_text.startswith("```"):
                plans_text = plans_text[3:]
            if plans_text.endswith("```"):
                plans_text = plans_text[:-3]
            
            plans_text = plans_text.strip()
            
            print(f"üìù AI Response (first 500 chars):")
            print(plans_text[:500])
            
            result = json.loads(plans_text)
            
            # Validate
            if "plans" not in result:
                raise ValueError("Invalid response structure - missing 'plans'")
            
            if len(result["plans"]) != 3:
                raise ValueError(f"Expected 3 plans, got {len(result['plans'])}")
            
            # Validate each plan
            for i, plan in enumerate(result["plans"]):
                required_fields = ["plan_id", "plan_name", "plan_type", "description", 
                                 "total_investment", "total_tax_saving", "overall_risk", "allocations"]
                for field in required_fields:
                    if field not in plan:
                        raise ValueError(f"Plan {i+1} missing field: {field}")
                
                # Validate allocations
                if not plan["allocations"]:
                    raise ValueError(f"Plan {i+1} has empty allocations")
                
                for j, alloc in enumerate(plan["allocations"]):
                    required_alloc_fields = ["category", "percentage", "risk_level", "pros", "cons"]
                    for field in required_alloc_fields:
                        if field not in alloc:
                            raise ValueError(f"Plan {i+1}, Allocation {j+1} missing field: {field}")
            
            print("‚úÖ Validation passed")
            return result
            
        except json.JSONDecodeError as e:
            print(f"‚ùå JSON Parse Error: {e}")
            print(f"Raw Response:\n{raw_response[:1000]}")
            return self._get_fallback_plans(request, tax_result)
            
        except ValueError as e:
            print(f"‚ùå Validation Error: {e}")
            return self._get_fallback_plans(request, tax_result)
            
        except Exception as e:
            print(f"‚ùå AI Service Error: {e}")
            import traceback
            traceback.print_exc()
            return self._get_fallback_plans(request, tax_result)
    
    def _get_fallback_plans(
        self,
        request: TaxCalculationRequest,
        tax_result: TaxCalculationResult
    ) -> Dict[str, Any]:
        """‡πÅ‡∏ú‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ ‡∏õ‡∏µ 2568"""
        
        print("‚ö†Ô∏è Using fallback plans (‡∏õ‡∏µ 2568)")
        
        gross = tax_result.gross_income
        risk = request.risk_tolerance
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        if gross < 1000000:
            base_investment = 150000
        elif gross < 2000000:
            base_investment = 500000
        else:
            base_investment = 1000000
        
        # ‡πÅ‡∏ú‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
        return {
            "plans": [
                {
                    "plan_id": "1",
                    "plan_name": "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 1 - ‡πÄ‡∏ô‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô",
                    "plan_type": risk,
                    "description": "‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á",
                    "total_investment": base_investment,
                    "total_tax_saving": int(base_investment * 0.25),
                    "overall_risk": risk,
                    "allocations": [
                        {
                            "category": "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
                            "investment_amount": int(base_investment * 0.25),
                            "percentage": 25,
                            "tax_saving": int(base_investment * 0.0625),
                            "risk_level": "low",
                            "pros": ["‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á"],
                            "cons": ["‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ï‡πà‡∏≥"]
                        },
                        {
                            "category": "RMF",
                            "investment_amount": int(base_investment * 0.50),
                            "percentage": 50,
                            "tax_saving": int(base_investment * 0.125),
                            "risk_level": risk,
                            "pros": ["‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏π‡∏á"],
                            "cons": ["‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏∑‡∏≠ 5 ‡∏õ‡∏µ"]
                        },
                        {
                            "category": "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç",
                            "investment_amount": int(base_investment * 0.25),
                            "percentage": 25,
                            "tax_saving": int(base_investment * 0.0625),
                            "risk_level": "low",
                            "pros": ["‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô"],
                            "cons": ["‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô‡∏¢‡∏≤‡∏ß"]
                        }
                    ]
                },
                {
                    "plan_id": "2",
                    "plan_name": "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 2 - ‡∏™‡∏°‡∏î‡∏∏‡∏•",
                    "plan_type": risk,
                    "description": "‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
                    "total_investment": int(base_investment * 1.3),
                    "total_tax_saving": int(base_investment * 1.3 * 0.25),
                    "overall_risk": risk,
                    "allocations": [
                        {
                            "category": "RMF",
                            "investment_amount": int(base_investment * 0.5),
                            "percentage": 38,
                            "tax_saving": int(base_investment * 0.125),
                            "risk_level": risk,
                            "pros": ["‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏™‡∏π‡∏á"],
                            "cons": ["‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏∑‡∏≠ 5 ‡∏õ‡∏µ"]
                        },
                        {
                            "category": "ThaiESG",
                            "investment_amount": int(base_investment * 0.4),
                            "percentage": 31,
                            "tax_saving": int(base_investment * 0.1),
                            "risk_level": risk,
                            "pros": ["‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô", "‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏†‡∏≤‡∏©‡∏µ 30%"],
                            "cons": ["‡∏ñ‡∏∑‡∏≠ 8 ‡∏õ‡∏µ"]
                        },
                        {
                            "category": "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï + ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
                            "investment_amount": int(base_investment * 0.25),
                            "percentage": 19,
                            "tax_saving": int(base_investment * 0.0625),
                            "risk_level": "low",
                            "pros": ["‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"],
                            "cons": ["‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ï‡πà‡∏≥"]
                        },
                        {
                            "category": "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç",
                            "investment_amount": int(base_investment * 0.15),
                            "percentage": 12,
                            "tax_saving": int(base_investment * 0.0375),
                            "risk_level": "low",
                            "pros": ["‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô"],
                            "cons": ["‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô"]
                        }
                    ]
                },
                {
                    "plan_id": "3",
                    "plan_name": "‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà 3 - ‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
                    "plan_type": risk,
                    "description": "‡πÉ‡∏ä‡πâ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà",
                    "total_investment": int(base_investment * 1.6),
                    "total_tax_saving": int(base_investment * 1.6 * 0.25),
                    "overall_risk": risk,
                    "allocations": [
                        {
                            "category": "RMF",
                            "investment_amount": int(base_investment * 0.7),
                            "percentage": 44,
                            "tax_saving": int(base_investment * 0.175),
                            "risk_level": risk,
                            "pros": ["‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"],
                            "cons": ["‡∏ñ‡∏∑‡∏≠ 5 ‡∏õ‡∏µ"]
                        },
                        {
                            "category": "ThaiESG",
                            "investment_amount": int(base_investment * 0.35),
                            "percentage": 22,
                            "tax_saving": int(base_investment * 0.0875),
                            "risk_level": risk,
                            "pros": ["‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô", "‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏†‡∏≤‡∏©‡∏µ 30%"],
                            "cons": ["‡∏ñ‡∏∑‡∏≠ 8 ‡∏õ‡∏µ"]
                        },
                        {
                            "category": "PVD",
                            "investment_amount": int(base_investment * 0.3),
                            "percentage": 19,
                            "tax_saving": int(base_investment * 0.075),
                            "risk_level": "medium",
                            "pros": ["‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°"],
                            "cons": ["‡∏ñ‡∏≠‡∏ô‡∏¢‡∏≤‡∏Å"]
                        },
                        {
                            "category": "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç",
                            "investment_amount": int(base_investment * 0.15),
                            "percentage": 9,
                            "tax_saving": int(base_investment * 0.0375),
                            "risk_level": "low",
                            "pros": ["‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô"],
                            "cons": ["‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô"]
                        },
                        {
                            "category": "‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï + ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
                            "investment_amount": int(base_investment * 0.1),
                            "percentage": 6,
                            "tax_saving": int(base_investment * 0.025),
                            "risk_level": "low",
                            "pros": ["‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"],
                            "cons": ["‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏ï‡πà‡∏≥"]
                        }
                    ]
                }
            ]
        }