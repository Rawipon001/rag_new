from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from app.config import settings
from app.models import (
    TaxCalculationRequest, 
    TaxOptimizationResponse,
    Recommendation
)
from app.services.tax_calculator import TaxCalculator
from app.services.rag_service import RAGService
from app.services.ai_service import AIService

# Initialize FastAPI
app = FastAPI(
    title=settings.app_name,
    version=settings.app_version,
    description="AI-powered tax advisor for Thai personal income tax"
)

# CORS Middleware - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö localhost ‡∏ó‡∏∏‡∏Å port
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://localhost:3001", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Initialize Services
rag_service = RAGService()
ai_service = AIService()

@app.get("/")
async def root():
    """Health check endpoint"""
    return {
        "app": settings.app_name,
        "version": settings.app_version,
        "status": "running"
    }

@app.get("/health")
async def health_check():
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    """
    qdrant_status = rag_service.check_collection_exists()
    
    return {
        "status": "healthy",
        "qdrant_connected": qdrant_status,
        "collection_exists": qdrant_status,
        "collection_name": settings.qdrant_collection_name
    }

@app.post("/api/calculate", response_model=TaxOptimizationResponse)
async def calculate_tax(request: TaxCalculationRequest):
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ‡∏•‡∏î‡∏†‡∏≤‡∏©‡∏µ
    
    Flow:
    1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ ‚Üí ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    3. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ ‚Üí ‡πÉ‡∏ä‡πâ RAG ‡∏´‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡∏•‡∏î‡∏†‡∏≤‡∏©‡∏µ
    """
    try:
        print(f"üì• Received request: {request}")
        
        # Step 1: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ
        tax_result = TaxCalculator.calculate(request)
        print(f"üí∞ Tax calculated: {tax_result.tax_amount:,.0f} ‡∏ö‡∏≤‡∏ó")
        
        # Step 2: Triage - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏†‡∏≤‡∏©‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?
        if not tax_result.requires_optimization:
            # ‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å
            return TaxOptimizationResponse(
                current_tax=tax_result,
                recommendations=[],
                summary=f"""
                ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å 
                ({tax_result.tax_amount:,.0f} ‡∏ö‡∏≤‡∏ó)
                
                ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°: {tax_result.gross_income:,.0f} ‡∏ö‡∏≤‡∏ó
                ‡∏Ñ‡πà‡∏≤‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {tax_result.total_deductions:,.0f} ‡∏ö‡∏≤‡∏ó
                ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: {tax_result.net_income:,.0f} ‡∏ö‡∏≤‡∏ó
                """,
                disclaimer="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
            )
        
        # Step 3: ‡πÉ‡∏ä‡πâ RAG Pipeline ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡∏•‡∏î‡∏†‡∏≤‡∏©‡∏µ
        print(f"üîç Starting RAG Pipeline for tax optimization...")
        
        # 3.1 Retrieve - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å Vector DB
        retrieved_context = await rag_service.retrieve_relevant_documents(
            request, tax_result
        )
        print(f"üìö Retrieved context length: {len(retrieved_context)}")
        
        # 3.2 Augmented Generation - ‡πÉ‡∏´‡πâ AI ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        recommendations_raw = await ai_service.generate_recommendations(
            request, tax_result, retrieved_context
        )
        print(f"ü§ñ AI generated {len(recommendations_raw)} recommendations")
        
        # 3.3 ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Pydantic Models
        recommendations = [
            Recommendation(**rec) for rec in recommendations_raw
        ]
        
        # Step 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á Summary
        total_potential_savings = sum(rec.tax_saving for rec in recommendations)
        summary = f"""
        ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô {tax_result.tax_amount:,.0f} ‡∏ö‡∏≤‡∏ó 
        (‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {tax_result.effective_tax_rate}%)
        
        ‡πÄ‡∏£‡∏≤‡∏û‡∏ö {len(recommendations)} ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ
        
        ‚≠ê ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {recommendations[0].strategy}
        üí∞ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏î‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏ñ‡∏∂‡∏á {total_potential_savings:,.0f} ‡∏ö‡∏≤‡∏ó
        
        ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
        """
        
        response = TaxOptimizationResponse(
            current_tax=tax_result,
            recommendations=recommendations,
            summary=summary,
            disclaimer="‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏•‡∏á‡∏ó‡∏∏‡∏ô"
        )
        
        print(f"‚úÖ Response ready with {len(recommendations)} recommendations")
        return response
        
    except Exception as e:
        print(f"‚ùå Error in calculate_tax: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(
            status_code=500,
            detail=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: {str(e)}"
        )

@app.post("/api/calculate-simple")
async def calculate_tax_simple(request: TaxCalculationRequest):
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ RAG)
    ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    """
    try:
        tax_result = TaxCalculator.calculate(request)
        return tax_result
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error calculating tax: {str(e)}"
        )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )