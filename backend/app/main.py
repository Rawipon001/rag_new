"""
FastAPI Main Application
Version: Qdrant Support
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware

from app.models import TaxCalculationRequest, TaxCalculationResponse
from app.services.tax_calculator import tax_calculator_service
from app.services.rag_service import RAGService
from app.services.ai_service import AIService
from app.config import settings

app = FastAPI(
    title="AI Tax Advisor API",
    description="‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏î‡πâ‡∏ß‡∏¢ AI + Qdrant RAG",
    version="3.2-qdrant"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Initialize services
print("=" * 50)
print("üöÄ Initializing AI Tax Advisor API")
print("=" * 50)

rag_service = RAGService()
ai_service = AIService()

print("=" * 50)
print("‚úÖ Initialization complete")
print("=" * 50)


@app.get("/")
async def root():
    return {
        "message": "AI Tax Advisor API",
        "version": "3.2-qdrant",
        "status": "running",
        "qdrant": {
            "url": settings.qdrant_url,
            "collection": settings.qdrant_collection_name,
            "available": rag_service.is_available()
        }
    }


@app.get("/health")
async def health_check():
    """Health check with Qdrant status"""
    qdrant_info = rag_service.get_collection_info()
    
    return {
        "status": "healthy",
        "qdrant": qdrant_info,
        "rag_available": rag_service.is_available()
    }


@app.post("/api/calculate-tax", response_model=TaxCalculationResponse)
async def calculate_tax_with_multiple_plans(
    request: TaxCalculationRequest
) -> TaxCalculationResponse:
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ú‡∏ô
    """
    try:
        # 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ
        tax_result = tax_calculator_service.calculate_tax(request)

        # 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Qdrant RAG (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        context = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å RAG"
        if rag_service.is_available():
            query = f"""
            ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ {request.gross_income} ‡∏ö‡∏≤‡∏ó
            ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á {request.risk_tolerance}
            ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏•‡∏∞‡∏•‡∏á‡∏ó‡∏∏‡∏ô
            ‡∏°‡∏µ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß ‡∏ö‡∏∏‡∏ï‡∏£ ‡∏ö‡∏¥‡∏î‡∏≤‡∏°‡∏≤‡∏£‡∏î‡∏≤
            """
            try:
                retrieved_docs = await rag_service.retrieve_relevant_documents(
                    query,
                    k=settings.rag_top_k
                )
                if retrieved_docs:
                    context_parts = [doc.page_content for doc in retrieved_docs if hasattr(doc, 'page_content')]
                    if context_parts:
                        context = "\n\n".join(context_parts)
                        print(f"‚úÖ RAG Context: {len(context)} characters")
                else:
                    print("‚ö†Ô∏è RAG: No documents retrieved")
            except Exception as e:
                print(f"‚ö†Ô∏è RAG Error: {e}")
        else:
            print("‚ö†Ô∏è RAG not available - using AI without context")

        # 3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ú‡∏ô (‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏Ñ‡πà percentage)
        investment_plans = await ai_service.generate_recommendations(
            request, tax_result, context
        )

        # ‚ú® =================================================================
        # ‚ú® ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏î‡πâ‡∏ß‡∏¢ Python ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ 100%
        # ‚ú® =================================================================
        print("ü§ñ Calculating exact investment amounts and tax savings...")

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î tiers ‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö AI service)
        gross = tax_result.gross_income
        if gross < 600000:
            tiers = [40000, 60000, 80000]
        elif gross < 1000000:
            tiers = [60000, 100000, 150000]
        elif gross < 1500000:
            tiers = [200000, 350000, 500000]
        elif gross < 2000000:
            tiers = [300000, 500000, 800000]
        elif gross < 3000000:
            tiers = [500000, 800000, 1200000]
        else:
            tiers = [800000, 1200000, 1800000]

        # üîß FIX: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì tax saving ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏†‡∏≤‡∏©‡∏µ
        # Tax Saving = ‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô
        # = (‡∏†‡∏≤‡∏©‡∏µ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏•‡∏á‡∏ó‡∏∏‡∏ô) - (‡∏†‡∏≤‡∏©‡∏µ‡∏ñ‡πâ‡∏≤‡∏•‡∏á‡∏ó‡∏∏‡∏ô)
        # = Investment √ó Marginal Rate ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô

        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà AI ‡∏™‡πà‡∏á‡∏°‡∏≤ ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ tier values
        for idx, plan in enumerate(investment_plans.get("plans", [])):
            # üéØ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ total_investment ‡∏ï‡∏≤‡∏° tier (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å AI)
            if idx < len(tiers):
                total_investment = tiers[idx]
                plan["total_investment"] = total_investment  # Override AI's value
            else:
                total_investment = plan.get("total_investment", 0)

            # üîß ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì total tax saving ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
            # ‡πÉ‡∏ä‡πâ total_investment ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ marginal rate ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            taxable_without_total_investment = tax_result.taxable_income + total_investment
            marginal_rate_for_total = tax_calculator_service.get_marginal_tax_rate(
                taxable_without_total_investment
            )
            calculated_total_tax_saving = int(total_investment * (marginal_rate_for_total / 100))

            # ‡πÅ‡∏à‡∏Å‡∏à‡πà‡∏≤‡∏¢ tax saving ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ allocation ‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô
            for alloc in plan.get("allocations", []):
                percentage = alloc.get("percentage", 0)

                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì investment_amount ‡∏à‡∏≤‡∏Å percentage
                investment_amount = int((percentage / 100) * total_investment)
                alloc["investment_amount"] = investment_amount

                # ‡πÅ‡∏à‡∏Å‡∏à‡πà‡∏≤‡∏¢ tax_saving ‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô percentage
                tax_saving = int((percentage / 100) * calculated_total_tax_saving)
                alloc["tax_saving"] = tax_saving

            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï total_tax_saving ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
            plan["total_tax_saving"] = calculated_total_tax_saving

        print("‚úÖ Calculation complete.")
        # ‚ú® =================================================================

        # 5. Return response (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
        return TaxCalculationResponse(
            tax_result=tax_result,
            investment_plans=investment_plans
        )

    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )